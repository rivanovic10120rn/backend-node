const { sequelize, Missions, Squads, Soldiers } = require('../models');
const { newMissionValidation, updateMissionValidation, } = require("../joi-validation.js");
const express = require('express');

const jwt = require('jsonwebtoken');
require('dotenv').config();

const route = express.Router();
route.use(express.json());
route.use(express.urlencoded({ extended: true }));

function authToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
  
    if (token == null) return res.status(401).json({ msg: err });
  
    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
    
        if (err) return res.status(403).json({ msg: err });
    
        req.user = user;
    
        next();
    });
}

//route.use(authToken);


route.get('/missions/', (req, res) => {

    // Soldiers.findOne({ where: { id: req.user.userID }})
    //     .then( usr => {
    //         Missions.findAll({
    //             include: ['assignedSquad']
    //              })
    //             .then( rows => res.json(rows) )
    //             .catch( err => res.status(500).json(err) );
    //     })
    //     .catch( err => res.status(500).json(err));

    Missions.findAll({
        include: ['assignedSquad']
         })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );
    
});

route.get('/missions/:id', (req, res) => {

    // Soldiers.findOne({ where: { id: req.user.userID }})
    //     .then( usr => {
    //         Missions.findOne({ where: { id: req.params.id },
    //             include: ['assignedSquad']
    //               })
    //             .then( rows => res.json(rows) )
    //             .catch( err => res.status(500).json(err) );
    //     })
    //     .catch( err => res.status(500).json(err));

    Missions.findOne({ where: { id: req.params.id },
        include: ['assignedSquad']
          })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );

});

route.get('/missions/squad/:id', (req, res) => {

    // Soldiers.findOne({ where: { id: req.user.userID }})
    //     .then( usr => {
    //         Missions.findAll({ where: { SquadID: req.params.id },
    //             include: ['assignedSquad']
    //               })
    //             .then( rows => res.json(rows) )
    //             .catch( err => res.status(500).json(err) );
    //     })
    //     .catch( err => res.status(500).json(err));

    Missions.findAll({ where: { SquadID: req.params.id },
        include: ['assignedSquad']
          })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );

});

route.post('/missions/', (req, res) => {

    //skloniti posle
    route.use(authToken);

    Soldiers.findOne({ where: { id: req.user.userID }})
        .then( usr => {
            if(usr.role == "HQ" || usr.role == "Sergeant"){
                const validEntry = newMissionValidation.validate(req.body);
  
                if(validEntry.error){
                    res.status(422).json({ msg: validEntry.error.message })
                }else{
                
                Missions.create({
                    description: req.body.description, 
                    location: req.body.location, 
                    SquadID: req.body.SquadID,
                    missionStatus: req.body.missionStatus,
                    })
                    .then( rows => res.json(rows) )
                    .catch( err => res.status(500).json(err) );
                }
            }else {
                res.status(403).json({ msg: "ERROR: You have invalid privileges to preform this action"})
            }
        })
        .catch( err => res.status(500).json(err));

    // const validEntry = newMissionValidation.validate(req.body);
  
    // if(validEntry.error){
    //     res.status(422).json({ msg: validEntry.error.message })
    // }else{
    
    // Missions.create({
    //     description: req.body.description, 
    //     location: req.body.location, 
    //     SquadID: req.body.SquadID,
    //     missionStatus: req.body.missionStatus,
    //      })
    //     .then( rows => res.json(rows) )
    //     .catch( err => res.status(500).json(err) );
    // }
});

route.put('/missions/:id', (req, res) => {

    //skloniti posle
    route.use(authToken);

    Soldiers.findOne({ where: { id: req.user.userID }})
        .then( usr => {
            if(usr.role == "HQ" || usr.role == "Sergeant"){
                const validEntry = updateMissionValidation.validate(req.body);
  
                if(validEntry.error){
                    res.status(422).json({ msg: validEntry.error.message })
                }else{
                
                Missions.findOne({ where: { id: req.params.id } })
                    .then( load => {
                        load.description = req.body.description;
                        load.location = req.body.location;
                        load.SquadID = req.body.SquadID;
                        load.missionStatus = req.body.missionStatus;

                        load.save()
                            .then( rows => res.json(rows) )
                            .catch( err => res.status(500).json(err) );
                    })
                    .catch( err => res.status(500).json(err) );
                }
            }else {
                res.status(403).json({ msg: "ERROR: You have invalid privileges to preform this action"})
            }
        })
        .catch( err => res.status(500).json(err));

    // const validEntry = updateMissionValidation.validate(req.body);
  
    // if(validEntry.error){
    //     res.status(422).json({ msg: validEntry.error.message })
    // }else{
    
    // Missions.findOne({ where: { id: req.params.id } })
    //     .then( usr => {
    //         usr.description = req.body.description;
    //         usr.location = req.body.location;
    //         usr.SquadID = req.body.SquadID;
    //         usr.missionStatus = req.body.missionStatus;

    //         usr.save()
    //             .then( rows => res.json(rows) )
    //             .catch( err => res.status(500).json(err) );
    //     })
    //     .catch( err => res.status(500).json(err) );
    // }
});

route.delete('/missions/:id', (req, res) => {

    //skloniti posle
    route.use(authToken);

    Soldiers.findOne({ where: { id: req.user.userID }})
        .then( usr => {
            if(usr.role == "HQ" || usr.role == "Sergeant"){
                Missions.findOne({ where: { id: req.params.id } })
                    .then( load => {
                        load.destroy()
                            .then( rows => res.json(rows) )
                            .catch( err => res.status(500).json(err) );
                    })
                    .catch( err => res.status(500).json(err) );
            }else {
                res.status(403).json({ msg: "ERROR: You have invalid privileges to preform this action"})
            }
        })
        .catch( err => res.status(500).json(err));

    // Missions.findOne({ where: { id: req.params.id } })
    //     .then( usr => {
    //         usr.destroy()
    //             .then( rows => res.json(rows) )
    //             .catch( err => res.status(500).json(err) );
    //     })
    //     .catch( err => res.status(500).json(err) );
});

module.exports = route;