const express = require('express');
const { sequelize, Squads, Soldiers } = require('../models');
const { newSquadValidation, updateSquadValidation } = require("../joi-validation.js");

const jwt = require('jsonwebtoken');
require('dotenv').config();

const route = express.Router();
route.use(express.json());
route.use(express.urlencoded({ extended: true }));

function authToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
  
    if (token == null) return res.status(401).json({ msg: err });
  
    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
    
        if (err) return res.status(403).json({ msg: err });
    
        req.user = user;
    
        next();
    });
}

//route.use(authToken);


route.get('/squads/', (req, res) => {

    // Soldiers.findOne({ where: { id: req.user.userID }})
    //     .then( usr => {
    //         Squads.findAll()
    //             .then( rows => res.json(rows) )
    //             .catch( err => res.status(500).json(err) );
    //     })
    //     .catch( err => res.status(500).json(err));

    Squads.findAll()
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );
    
});

route.get('/squads/:id', (req, res) => {

    // Soldiers.findOne({ where: { id: req.user.userID }})
    //     .then( usr => {
    //         Squads.findOne({ where: { id: req.params.id } })
    //             .then( rows => res.json(rows) )
    //             .catch( err => res.status(500).json(err) );
    //     })
    //     .catch( err => res.status(500).json(err));

    Squads.findOne({ where: { id: req.params.id } })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );

});

route.post('/squads/', (req, res) => {

    //skloniti posle
    route.use(authToken);

    Soldiers.findOne({ where: { id: req.user.userID }})
        .then( usr => {
            if(usr.role == "HQ"){
                const validEntry = newSquadValidation.validate(req.body);
  
                if(validEntry.error){
                    res.status(422).json({ msg: validEntry.error.message })
                }else{
                
                Squads.create({ name: req.body.name, type: req.body.type, status: req.body.status })
                    .then( rows => res.json(rows) )
                    .catch( err => res.status(500).json(err) );
                }
            }else {
                res.status(403).json({ msg: "ERROR: You have invalid privileges to preform this action"})
            }
        })
        .catch( err => res.status(500).json(err));

    // const validEntry = newSquadValidation.validate(req.body);
  
    // if(validEntry.error){
    //     res.status(422).json({ msg: validEntry.error.message })
    // }else{
    
    // Squads.create({ name: req.body.name, type: req.body.type, status: req.body.status })
    //     .then( rows => res.json(rows) )
    //     .catch( err => res.status(500).json(err) );
    // }
});

route.put('/squads/:id', (req, res) => {

    //skloniti posle
    route.use(authToken);

    Soldiers.findOne({ where: { id: req.user.userID }})
        .then( usr => {
            if(usr.role == "HQ"){
                const validEntry = updateSquadValidation.validate(req.body);
  
                if(validEntry.error){
                    res.status(422).json({ msg: validEntry.error.message })
                }else{
                
                Squads.findOne({ where: { id: req.params.id } })
                    .then( usr => {
                        usr.name = req.body.name;
                        usr.type = req.body.type;
                        usr.status = req.body.status;
            
                        usr.save()
                            .then( rows => res.json(rows) )
                            .catch( err => res.status(500).json(err) );
                    })
                    .catch( err => res.status(500).json(err) );
                }
            }else {
                res.status(403).json({ msg: "ERROR: You have invalid privileges to preform this action"})
            }
        })
        .catch( err => res.status(500).json(err));

    // const validEntry = updateSquadValidation.validate(req.body);
  
    // if(validEntry.error){
    //     res.status(422).json({ msg: validEntry.error.message })
    // }else{
    
    // Squads.findOne({ where: { id: req.params.id } })
    //     .then( usr => {
    //         usr.name = req.body.name;
    //         usr.type = req.body.type;
    //         usr.status = req.body.status;

    //         usr.save()
    //             .then( rows => res.json(rows) )
    //             .catch( err => res.status(500).json(err) );
    //     })
    //     .catch( err => res.status(500).json(err) );
    // }
});

route.delete('/squads/:id', (req, res) => {

    //skloniti posle
    route.use(authToken);

    Soldiers.findOne({ where: { id: req.user.userID }})
        .then( usr => {
            if(usr.role == "HQ"){
                Squads.findOne({ where: { id: req.params.id } })
                    .then( load => {
                        load.destroy()
                            .then( rows => res.json(rows) )
                            .catch( err => res.status(500).json(err) );
                    })
                    .catch( err => res.status(500).json(err) );
            }else {
                res.status(403).json({ msg: "ERROR: You have invalid privileges to preform this action"})
            }
        })
        .catch( err => res.status(500).json(err));

    // Squads.findOne({ where: { id: req.params.id } })
    //     .then( usr => {
    //         usr.destroy()
    //             .then( rows => res.json(rows) )
    //             .catch( err => res.status(500).json(err) );
    //     })
    //     .catch( err => res.status(500).json(err) );
});


module.exports = route;